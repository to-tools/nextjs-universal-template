---
description: 
globs: 
alwaysApply: false
---
# 路由和页面架构

## Next.js App Router 结构

### 根级路由
- [`src/app/page.tsx`](mdc:src/app/page.tsx) - 根路径重定向到默认语言
- [`src/app/layout.tsx`](mdc:src/app/layout.tsx) - 根布局，包含主题Provider
- [`src/app/not-found.tsx`](mdc:src/app/not-found.tsx) - 全局404页面
- [`src/app/globals.css`](mdc:src/app/globals.css) - 全局样式和CSS变量

### 国际化路由结构
所有用户页面都在 `/[lang]/` 动态路由下：

```
src/app/[lang]/
├── layout.tsx          # 国际化布局
├── page.tsx           # 主页
├── about/
│   └── page.tsx       # 关于页面
├── privacy/
│   └── page.tsx       # 隐私政策
└── terms/
    └── page.tsx       # 服务条款
```

### 路由参数处理
```tsx
// 页面组件接收语言参数
interface PageProps {
  params: { lang: string };  // 'zh', 'en', 'ja', 'ko', 'fr'
  searchParams?: { [key: string]: string | string[] | undefined };
}

export default function Page({ params: { lang } }: PageProps) {
  // 组件逻辑
}
```

### 中间件路由处理
[`middleware.ts`](mdc:middleware.ts) 处理：
- 语言检测和重定向
- URL路径映射 (`zh` → `zh-CN`)
- 默认语言设置
- 静态资源排除

## SEO 和元数据

### 动态元数据
```tsx
// 在页面中生成元数据
export async function generateMetadata({
  params: { lang }
}: {
  params: { lang: string };
}): Promise<Metadata> {
  const translations = await loadTranslationsForSSR(mapPathToLocale(lang));
  
  return {
    title: translations.seo.pages.home.title,
    description: translations.seo.pages.home.description,
    // 其他元数据...
  };
}
```

### 网站地图和Robots
- [`src/app/sitemap.ts`](mdc:src/app/sitemap.ts) - 动态网站地图生成
- [`src/app/robots.ts`](mdc:src/app/robots.ts) - Robots.txt 配置

## API 路由

### 结构
```
src/app/api/
├── route.ts          # 根API路由
└── [endpoint]/
    └── route.ts      # 具体API端点
```

### API 响应格式
```tsx
// 标准API响应
export async function GET(request: Request) {
  try {
    const data = await fetchData();
    return Response.json({ success: true, data });
  } catch (error) {
    return Response.json(
      { success: false, error: 'Error message' },
      { status: 500 }
    );
  }
}
```

## 特殊文件

### 布局层次
1. `src/app/layout.tsx` - 根布局 (HTML, 主题)
2. `src/app/[lang]/layout.tsx` - 语言布局 (导航, 国际化)
3. 页面特定布局 - 根据需要添加

### 错误处理
- `not-found.tsx` - 404错误页面
- `error.tsx` - 错误边界 (可在任何路由层级添加)
- `loading.tsx` - 加载状态 (可在任何路由层级添加)

### 页面生成
```tsx
// 静态参数生成 (用于构建时预渲染)
export function generateStaticParams() {
  return SUPPORTED_LOCALES.map((locale) => ({
    lang: locale,
  }));
}
```

## URL 模式

### 标准页面URL
- 主页: `/zh/`, `/en/`, `/ja/`, `/ko/`, `/fr/`
- 关于页面: `/zh/about`, `/en/about`
- 隐私政策: `/zh/privacy`, `/en/privacy`
- 服务条款: `/zh/terms`, `/en/terms`

### 重定向规则
- `/` → `/zh/` (默认中文)
- 无效语言代码 → 404页面
- 旧URL模式 → 新的国际化URL
# 路由和页面架构

## Next.js App Router 结构

### 根级路由
- [`src/app/page.tsx`](mdc:src/app/page.tsx) - 根路径重定向到默认语言
- [`src/app/layout.tsx`](mdc:src/app/layout.tsx) - 根布局，包含主题Provider
- [`src/app/not-found.tsx`](mdc:src/app/not-found.tsx) - 全局404页面
- [`src/app/globals.css`](mdc:src/app/globals.css) - 全局样式和CSS变量

### 国际化路由结构
所有用户页面都在 `/[lang]/` 动态路由下：

```
src/app/[lang]/
├── layout.tsx          # 国际化布局
├── page.tsx           # 主页 (表情符号生成器)
├── emojis/
│   └── page.tsx       # 表情符号画廊
├── about/
│   └── page.tsx       # 关于页面
├── privacy/
│   └── page.tsx       # 隐私政策
└── terms/
    └── page.tsx       # 服务条款
```

### 路由参数处理
```tsx
// 页面组件接收语言参数
interface PageProps {
  params: { lang: string };  // 'zh', 'en', 'ja', 'ko', 'fr'
  searchParams?: { [key: string]: string | string[] | undefined };
}

export default function Page({ params: { lang } }: PageProps) {
  // 组件逻辑
}
```

### 中间件路由处理
[`middleware.ts`](mdc:middleware.ts) 处理：
- 语言检测和重定向
- URL路径映射 (`zh` → `zh-CN`)
- 默认语言设置
- 静态资源排除

## SEO 和元数据

### 动态元数据
```tsx
// 在页面中生成元数据
export async function generateMetadata({
  params: { lang }
}: {
  params: { lang: string };
}): Promise<Metadata> {
  const translations = await loadTranslationsForSSR(mapPathToLocale(lang));
  
  return {
    title: translations.meta.title,
    description: translations.meta.description,
    // 其他元数据...
  };
}
```

### 网站地图和Robots
- [`src/app/sitemap.ts`](mdc:src/app/sitemap.ts) - 动态网站地图生成
- [`src/app/robots.ts`](mdc:src/app/robots.ts) - Robots.txt 配置

## API 路由

### 结构
```
src/app/api/
├── route.ts          # 根API路由
└── [endpoint]/
    └── route.ts      # 具体API端点
```

### API 响应格式
```tsx
// 标准API响应
export async function GET(request: Request) {
  try {
    const data = await fetchData();
    return Response.json({ success: true, data });
  } catch (error) {
    return Response.json(
      { success: false, error: 'Error message' },
      { status: 500 }
    );
  }
}
```

## 特殊文件

### 布局层次
1. `src/app/layout.tsx` - 根布局 (HTML, 主题)
2. `src/app/[lang]/layout.tsx` - 语言布局 (导航, 国际化)
3. 页面特定布局 - 根据需要添加

### 错误处理
- `not-found.tsx` - 404错误页面
- `error.tsx` - 错误边界 (可在任何路由层级添加)
- `loading.tsx` - 加载状态 (可在任何路由层级添加)

### 页面生成
```tsx
// 静态参数生成 (用于构建时预渲染)
export function generateStaticParams() {
  return SUPPORTED_LOCALES.map((locale) => ({
    lang: locale,
  }));
}
```

## URL 模式

### 标准页面URL
- 主页: `/zh/`, `/en/`, `/ja/`, `/ko/`, `/fr/`
- 表情符号画廊: `/zh/emojis`, `/en/emojis`
- 关于页面: `/zh/about`, `/en/about`

### 重定向规则
- `/` → `/zh/` (默认中文)
- 无效语言代码 → 404页面
- 旧URL模式 → 新的国际化URL
